'use strict'

const path = require('path')
const fs = require('fs')
const demoPath = path.resolve(__dirname, '../src/demo_list.json')
const glob = require('glob')
const match = path.join(__dirname, '../src/demos/*/*.vue')
const dir = path.join(__dirname, '../src/demos/')
const yaml = require('js-yaml')
const reg = /<demo[^>]*>([\s\S]*?)<\/demo>/g
let strall =  [];
const argv = require('yargs').argv
argv.simulate = argv.simulate || false

const isInclude = function (name, include) {
  let list = include.split(',')
  for (let i = 0; i < list.length; i++) {
    if (name.includes(list[i])) {
      return true
    }
  }
  return false
}

module.exports = {
  options: {
    vuxDev: !argv.simulate, // true
    vuxSetBabel: argv.simulate, // false
    vuxWriteFile: false,
    env: 'dev'
  },
  plugins: [
    'vux-ui', 'inline-manifest',
    {
      name: 'duplicate-style',
      options: {
        cssProcessorOptions : {
          safe: true,
          zindex: false,
          autoprefixer: {
            add: true,
            "browsers": [
              "iOS >= 7",
              "Android >= 4.1"
            ]
          }
        }
      }
    },
    {
      name: 'progress-bar',
      envs: ['development']
    },
    {
      name: 'js-parser',
      test: /main\.js/,
      fn: function (source) {
        this.addDependency(demoPath)
        let list = fs.readFileSync(demoPath, 'utf-8')
        list = JSON.parse(list)

        let groupList = []
        let dirs = {}
        const listDir = glob.sync(match).filter(one => {
          return !one.includes('_index.vue')
        }).map(one => {
          one = path.normalize(one)
          const component = one.replace(dir, '').replace('.vue', '').replace(path.sep, '/')
          let title = {
            en: 'EXAMPLE',
            'zh-CN': 'EXAMPLE'
          }
          let order = 999
          const urlpath = '/components/' + component
          let name = one.replace(dir, '').split(path.sep)[0]
          if (!Array.isArray(dirs[name])) {
            dirs[name] = []
          }

          const code = fs.readFileSync(path.join(__dirname, `../src/demos/${component}.vue`), 'utf-8')

          const rs = code.match(reg)
          if (rs) {
            let meta = yaml.safeLoad(rs[0].replace('<demo>', '').trim().replace('</demo>', ''))
            if (typeof meta.title === 'string') {
              title.en = meta.title
              title['zh-CN'] = meta.title
            } else if (typeof meta.title === 'object') {
              title.en = meta.title.en
              title['zh-CN'] = meta.title['zh-CN']
            }
            if (meta.order) {
              order = meta.order * 1
            }
          }
          dirs[name].push({
            title,
            path: urlpath,
            order
          })
          return component + '#' + urlpath
        })
        list = list.concat(listDir)

        for (let dir in dirs) {
          dirs[dir].sort((a, b) => {
            return a.order > b.order ? 1 : -1
          })
          const file = `<template>
  <!-- THIS FILE IS AUTO-GENERATED BY build/vux-config.js -->
  <group>
    <cell v-for="demo in list" :key="demo.path" is-link :link="demo.path" :title="demo.title[lang]"></cell>
  </group>
</template>

<script>
/* eslint-disable */
export default {
  created () {
    this.lang = this.$locale.get()
  },
  data () {
    return {
      lang: 'en',
      list: ${JSON.stringify(dirs[dir], null, 2)}
    }
  }
}
</script>
`
        fs.writeFileSync(path.join(__dirname, `../src/demos/${dir}/_index.vue`), file)
        groupList.push(`${dir}/_index#/components/${dir}/home`)

      }
      list = list.concat(groupList)

      if (argv.demo) {
        list = list.filter(item => {
          return item.indexOf(argv.demo) > -1
        })
      }
      let str = []
      list.forEach(one => {
        let filename = one
        let path = `/component/${toDash(one)}`
        if (/#/.test(one)) {
          filename = one.split('#')[0]
          path = one.split('#')[1]
        }

        let shouldIncluded = true

        if (path !== '/demo' && argv.env && argv.env.include) {
          shouldIncluded = isInclude(path, argv.env.include)
        }
        if(path === '/component/ehrhome'){
          strall.push(`{
            path: '${path}',
            component: () => import('./demos/${filename}.vue').then(m => m.default),
            meta: {
              keepAlive: true
            }
          }`)
        }
        if (shouldIncluded) {
          console.log('正在加载组件....'+filename);
          strall.push(`{
            path: '${path}',
            component: () => import('./demos/${filename}.vue').then(m => m.default)
          }`)
        }

        //myehr目录下所有组件

      })

        // 404 page
        strall.push(`{
          path: '*',
          component: () => import('./demos/NotFoundComponent.vue').then(m => m.default)
        }`)
        let temp = [];


       // strall = fileDisplay('./src/myehrpath',strall);



        strall = '['+strall.join(',\n')+']'
        console.log('加载完成后:'+strall);
        source = source.replace('const routes = []', 'const routes = ' + strall)
        return source
      }
    },
    {
      name: 'i18n',
      vuxStaticReplace: false,
      staticReplace: false,
      extractToFiles: 'src/locales/components.yml',
      localeList: ['en', 'zh-CN']
    },
    {
      name: 'less-theme',
      path: 'src/theme.less'
    }
  ]
}

function toDash(str) {
  return str.replace(/([A-Z])/g, function (m, w) {
    return '-' + w.toLowerCase();
  }).replace('-', '')
}


function fileDisplay (filePath,strall){

  //根据文件路径读取文件，返回文件列表
 var files =  fs.readdirSync(filePath);
   //遍历读取到的文件列表
   for(var  i=0 ; i<files.length ; i++){
     var filename = files[i];
     console.log('LLLLLLLLLLLLL'+files[i])
//获取当前文件的绝对路径
     var filedir = path.join(filePath, filename);

     filedir    = path.resolve(filedir)
     //根据文件路径获取文件信息，返回一个fs.Stats对象
     let stats = fs.statSync(filedir);
     console.log(stats);

     var isFile = stats.isFile();//是文件
     var isDir = stats.isDirectory();//是文件夹
     if(isFile){
       let temps = [];
       let temppath = filedir.substr(filedir.indexOf("\\myehrpath\\"),filedir.length);
       temppath = temppath.replace(".vue",'');

       strall.push("{ path: '"+temppath.replace("\\",'/').replace("\\",'/').replace("\\",'/').replace("\\",'/')+"',component: () => import( '"+filedir.replace("\\",'/').replace("\\",'/').replace("\\",'/').replace("\\",'/').replace("\\",'/').replace("\\",'/')+"' ).then(m => m.default)}");
       console.log('映射路径：'+temppath+'**');
       console.log('文件路径：'+filedir + '****文件名： '+filename);
       // 读取文件内容
       var content = fs.readFileSync(filedir, 'utf-8');
       console.log(content);
     }
     if(isDir){
       strall = fileDisplay(filedir,strall);//递归，如果是文件夹，就继续遍历该文件夹下面的文件
     }

  }
   files.forEach(function(filename){

   });

  return strall;
}

